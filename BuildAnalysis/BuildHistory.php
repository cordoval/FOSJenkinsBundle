<?php

/*
 * This file is part of the FOSJenkins package.
 *
 * (c) Hugo Hamon <hugo.hamon@sensio.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace FOS\Bundle\JenkinsBundle\BuildAnalysis;

/**
 * The BuildHistory logger class aggregates information about the last
 * builds generated by the Jenkins continuous integration server.
 *
 * @author Hugo Hamon <hugo.hamon@sensio.com>
 */
class BuildHistory
{
    const BUILD_STABLE = 'stable';

    /**
     * The SimpleXmlElement instance.
     *
     * @var \SimpleXmlElement
     */
    private $xml;

    /**
     * The builds history summary.
     *
     * @var array
     */
    private $builds;

    /**
     * Constructor.
     *
     * @param \SimpleXmlElement $xml A \SimpleXmlElement instance
     */
    public function __construct(\SimpleXmlElement $xml)
    {
        $this->xml = $xml;
        $this->builds = array();

        $this->buildBuildHistory();
    }

    /**
     * Loads the whole builds history summary by parsing the RSS feed.
     *
     */
    private function buildBuildHistory()
    {
        foreach ($this->xml->entry as $entry) {
            $infos = $this->extractBuildInfos((string) $entry->title);
            $uri   = (string) $entry->link['href'];
            $date  = (string) $entry->published;

            $build = new Build($infos['number'], $infos['status'], $uri, $date, $this->isBuildSuccessfull($infos['status']));

            $this->builds[] = $build;
        }
    }

    /**
     * Extracts build information from the build title. This method extracts
     * the build number and the build status.
     *
     * @param string $title The title string from which to extract information
     * @return array $infos Build information as an associative array
     */
    private function extractBuildInfos($title)
    {
        $infos = array(
            'number' => '',
            'status' => ''
        );

        preg_match_all("`#(\d+) \((.*)\)`", $title, $matches);

        if (!empty($matches[1][0])) {
            $infos['number'] = (int) $matches[1][0];
        }

        if (!empty($matches[2][0])) {
            $infos['status'] = $matches[2][0];
        }

        return $infos;
    }

    /**
     * Returns the most recent build instance.
     *
     * @return Build
     */
    public function getMostRecentBuild()
    {
        return $this->builds[0];
    }

    /**
     * Returns whether or not a build is successfull by parsing its status.
     *
     * The status is a string generated by the Jenkins server. If the status
     * contains the word `stable` or `back to normal`, the build is considered
     * `successfull` by Jenkins.
     *
     * @param string $status A build status as a string
     * @return Boolean
     */
    public function isBuildSuccessfull($status)
    {
        return 1 === preg_match('`stable|back to normal`i', $status);
    }

    /**
     * Returns the whole builds summary.
     *
     * The builds history contains basic information on each last builds like
     * whether or not it's successfull or the date at which the build was run.
     *
     * @return array The builds history summary
     */
    public function getBuilds()
    {
        return $this->builds;
    }

    /**
     * Returns the number of successfull builds in the last builds history.
     *
     * @return integer Number of last successfull builds
     */
    public function getLastSuccessfullBuildsCount()
    {
        $count = 0;
        foreach ($this->builds as $build) {
            if ($build->isSucceeded()) {
                $count++;
            }
        }

        return $count;
    }

    /**
     * Returns the number of failed builds in the last builds history.
     *
     * @return integer Number of last failed builds
     */
    public function getLastFailedBuildsCount()
    {
        return count($this->builds) - $this->getLastSuccessfullBuildsCount();
    }
}