<?php

/*
 * This file is part of the FOSJenkins package.
 *
 * (c) Hugo Hamon <hugo.hamon@sensio.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace FOS\Bundle\JenkinsBundle\Logger\Build;

/**
 * The BuildsSummaryLogger logger class aggregates information about the last
 * builds generated by the Jenkins continuous integration server.
 *
 * @author Hugo Hamon <hugo.hamon@sensio.com>
 */
class BuildsSummaryLogger
{
    const BUILD_STABLE = 'stable';

    /**
     * The SimpleXmlElement instance.
     *
     * @var \SimpleXmlElement
     */
    private $xml;

    /**
     * The build history summary.
     *
     * @var array
     */
    private $summary;

    /**
     * Constructor.
     *
     * @param \SimpleXmlElement $xml A \SimpleXmlElement instance
     */
    public function __construct(\SimpleXmlElement $xml)
    {
        $this->xml = $xml;
        $this->summary = array();
    }

    /**
     * Loads the whole builds history summary by parsing the RSS feed.
     *
     */
    private function loadBuildsSummary()
    {
        if (!count($this->summary)) {
            foreach ($this->xml->entry as $entry) {
                $title = (string) $entry->title;
                preg_match_all("`#(\d+) \((.*)\)`", $title, $matches);

                $id = (int) $matches[1][0];
                $status = $matches[2][0];

                $this->summary[] = array(
                    'id' => $id,
                    'status' => $status,
                    'uri' => (string) $entry->link['href'],
                    'date' => (string) $entry->published,
                    'success' => $this->isBuildSuccessfull($status)
                );
            }
        }
    }

    /**
     * Returns whether or not a build is successfull by parsing its status.
     *
     * The status is a string generated by the Jenkins server. If the status
     * contains the word `stable` or `back to normal`, the build is considered
     * `successfull` by Jenkins.
     *
     * @param string $status A build status as a string
     * @return Boolean
     */
    public function isBuildSuccessfull($status)
    {
        return 1 === preg_match('`stable|back to normal`i', $status);
    }

    /**
     * Returns the whole builds summary.
     *
     * The builds summary contains basic information on each last builds like
     * whether or not it's successfull or the date at which the build was run.
     *
     * @return array The builds history summary
     */
    public function getBuildsSummary()
    {
        $this->loadBuildsSummary();

        return $this->summary;
    }

    /**
     * Returns the number of successfull builds in the last builds history.
     *
     * @return integer Number of last successfull builds
     */
    public function getLastSuccessfullBuildsCount()
    {
        $this->loadBuildsSummary();

        $count = 0;
        foreach ($this->summary as $build) {
            if ($build['success']) {
                $count++;
            }
        }

        return $count;
    }

    /**
     * Returns the number of failed builds in the last builds history.
     *
     * @return integer Number of last failed builds
     */
    public function getLastFailedBuildsCount()
    {
        $this->loadBuildsSummary();

        return count($this->summary) - $this->getLastSuccessfullBuildsCount();
    }
}